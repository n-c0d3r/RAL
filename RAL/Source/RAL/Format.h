#pragma once

#include <RAL/.BuildInfo>
#include <RAL/Utils.h>

#include <RAL/Singleton.h>
#include <RAL/Flag.h>



namespace RAL {

	RAL_BEGIN_FLAGS(Format)

		RAL_FLAG32(UNKNOWN);//0,
		RAL_FLAG32(R32G32B32A32_TYPELESS);//1,
		RAL_FLAG32(R32G32B32A32_FLOAT);//2,
		RAL_FLAG32(R32G32B32A32_UINT);//3,
		RAL_FLAG32(R32G32B32A32_SINT);//4,
		RAL_FLAG32(R32G32B32_TYPELESS);//5,
		RAL_FLAG32(R32G32B32_FLOAT);//6,
		RAL_FLAG32(R32G32B32_UINT);//7,
		RAL_FLAG32(R32G32B32_SINT);//8,
		RAL_FLAG32(R16G16B16A16_TYPELESS);//9,
		RAL_FLAG32(R16G16B16A16_FLOAT);//10,
		RAL_FLAG32(R16G16B16A16_UNORM);//11,
		RAL_FLAG32(R16G16B16A16_UINT);//12,
		RAL_FLAG32(R16G16B16A16_SNORM);//13,
		RAL_FLAG32(R16G16B16A16_SINT);//14,
		RAL_FLAG32(R32G32_TYPELESS);//15,
		RAL_FLAG32(R32G32_FLOAT);//16,
		RAL_FLAG32(R32G32_UINT);//17,
		RAL_FLAG32(R32G32_SINT);//18,
		RAL_FLAG32(R32G8X24_TYPELESS);//19,
		RAL_FLAG32(D32_FLOAT_S8X24_UINT);//20,
		RAL_FLAG32(R32_FLOAT_X8X24_TYPELESS);//21,
		RAL_FLAG32(X32_TYPELESS_G8X24_UINT);//22,
		RAL_FLAG32(R10G10B10A2_TYPELESS);//23,
		RAL_FLAG32(R10G10B10A2_UNORM);//24,
		RAL_FLAG32(R10G10B10A2_UINT);//25,
		RAL_FLAG32(R11G11B10_FLOAT);//26,
		RAL_FLAG32(R8G8B8A8_TYPELESS);//27,
		RAL_FLAG32(R8G8B8A8_UNORM);//28,
		RAL_FLAG32(R8G8B8A8_UNORM_SRGB);//29,
		RAL_FLAG32(R8G8B8A8_UINT);//30,
		RAL_FLAG32(R8G8B8A8_SNORM);//31,
		RAL_FLAG32(R8G8B8A8_SINT);//32,
		RAL_FLAG32(R16G16_TYPELESS);//33,
		RAL_FLAG32(R16G16_FLOAT);//34,
		RAL_FLAG32(R16G16_UNORM);//35,
		RAL_FLAG32(R16G16_UINT);//36,
		RAL_FLAG32(R16G16_SNORM);//37,
		RAL_FLAG32(R16G16_SINT);//38,
		RAL_FLAG32(R32_TYPELESS);//39,
		RAL_FLAG32(D32_FLOAT);//40,
		RAL_FLAG32(R32_FLOAT);//41,
		RAL_FLAG32(R32_UINT);//42,
		RAL_FLAG32(R32_SINT);//43,
		RAL_FLAG32(R24G8_TYPELESS);//44,
		RAL_FLAG32(D24_UNORM_S8_UINT);//45,
		RAL_FLAG32(R24_UNORM_X8_TYPELESS);//46,
		RAL_FLAG32(X24_TYPELESS_G8_UINT);//47,
		RAL_FLAG32(R8G8_TYPELESS);//48,
		RAL_FLAG32(R8G8_UNORM);//49,
		RAL_FLAG32(R8G8_UINT);//50,
		RAL_FLAG32(R8G8_SNORM);//51,
		RAL_FLAG32(R8G8_SINT);//52,
		RAL_FLAG32(R16_TYPELESS);//53,
		RAL_FLAG32(R16_FLOAT);//54,
		RAL_FLAG32(D16_UNORM);//55,
		RAL_FLAG32(R16_UNORM);//56,
		RAL_FLAG32(R16_UINT);//57,
		RAL_FLAG32(R16_SNORM);//58,
		RAL_FLAG32(R16_SINT);//59,
		RAL_FLAG32(R8_TYPELESS);//60,
		RAL_FLAG32(R8_UNORM);//61,
		RAL_FLAG32(R8_UINT);//62,
		RAL_FLAG32(R8_SNORM);//63,
		RAL_FLAG32(R8_SINT);//64,
		RAL_FLAG32(A8_UNORM);//65,
		RAL_FLAG32(R1_UNORM);//66,
		RAL_FLAG32(R9G9B9E5_SHAREDEXP);//67,
		RAL_FLAG32(R8G8_B8G8_UNORM);//68,
		RAL_FLAG32(G8R8_G8B8_UNORM);//69,
		RAL_FLAG32(BC1_TYPELESS);//70,
		RAL_FLAG32(BC1_UNORM);//71,
		RAL_FLAG32(BC1_UNORM_SRGB);//72,
		RAL_FLAG32(BC2_TYPELESS);//73,
		RAL_FLAG32(BC2_UNORM);//74,
		RAL_FLAG32(BC2_UNORM_SRGB);//75,
		RAL_FLAG32(BC3_TYPELESS);//76,
		RAL_FLAG32(BC3_UNORM);//77,
		RAL_FLAG32(BC3_UNORM_SRGB);//78,
		RAL_FLAG32(BC4_TYPELESS);//79,
		RAL_FLAG32(BC4_UNORM);//80,
		RAL_FLAG32(BC4_SNORM);//81,
		RAL_FLAG32(BC5_TYPELESS);//82,
		RAL_FLAG32(BC5_UNORM);//83,
		RAL_FLAG32(BC5_SNORM);//84,
		RAL_FLAG32(B5G6R5_UNORM);//85,
		RAL_FLAG32(B5G5R5A1_UNORM);//86,
		RAL_FLAG32(B8G8R8A8_UNORM);//87,
		RAL_FLAG32(B8G8R8X8_UNORM);//88,
		RAL_FLAG32(R10G10B10_XR_BIAS_A2_UNORM);//89,
		RAL_FLAG32(B8G8R8A8_TYPELESS);//90,
		RAL_FLAG32(B8G8R8A8_UNORM_SRGB);//91,
		RAL_FLAG32(B8G8R8X8_TYPELESS);//92,
		RAL_FLAG32(B8G8R8X8_UNORM_SRGB);//93,
		RAL_FLAG32(BC6H_TYPELESS);//94,
		RAL_FLAG32(BC6H_UF16);//95,
		RAL_FLAG32(BC6H_SF16);//96,
		RAL_FLAG32(BC7_TYPELESS);//97,
		RAL_FLAG32(BC7_UNORM);//98,
		RAL_FLAG32(BC7_UNORM_SRGB);//99,
		RAL_FLAG32(AYUV);//100,
		RAL_FLAG32(Y410);//101,
		RAL_FLAG32(Y416);//102,
		RAL_FLAG32(NV12);//103,
		RAL_FLAG32(P010);//104,
		RAL_FLAG32(P016);//105,
		RAL_FLAG32(_420_OPAQUE);//106,
		RAL_FLAG32(YUY2);//107,
		RAL_FLAG32(Y210);//108,
		RAL_FLAG32(Y216);//109,
		RAL_FLAG32(NV11);//110,
		RAL_FLAG32(AI44);//111,
		RAL_FLAG32(IA44);//112,
		RAL_FLAG32(P8);//113,
		RAL_FLAG32(A8P8);//114,
		RAL_FLAG32(B4G4R4A4_UNORM);//115,
		RAL_FLAG32(P208);//130,
		RAL_FLAG32(V208);//131,
		RAL_FLAG32(V408);//132,
		RAL_FLAG32(SAMPLER_FEEDBACK_MIN_MIP_OPAQUE);
		RAL_FLAG32(SAMPLER_FEEDBACK_MIP_REGION_USED_OPAQUE);
		RAL_FLAG32(FORCE_UINT);//0xffffffff

	RAL_END_FLAGS(Format)

}